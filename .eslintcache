[{"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/index.js":"1","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/App.js":"2","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/reportWebVitals.js":"3","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Context.js":"4","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Routes.js":"5","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Stylings/styleApp.js":"6","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/PrimarySearchAppBar.js":"7","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/Footer.js":"8","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/CategoriesBar.js":"9","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Api.js":"10","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/LoadingText.js":"11","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/hooks/useLocalStorageHook.js":"12","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/HomePage/Home.js":"13","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/Stylings/stylePrimarySearchAppBar.js":"14","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/WelcomePage.js":"15","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/NotFound.js":"16","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Signup.js":"17","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Login.js":"18","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Profile.js":"19","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/BidConfirmation.js":"20","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/ProductDetails.js":"21","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/ProductsList.js":"22","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/NotificationAppBarItem.js":"23","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/Category.js":"24","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/MobileCategory.js":"25","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/Stylings/styleCategoriesBar.js":"26","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/Stylings/styleFooter.js":"27","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/RecentWinsFeed.js":"28","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/RecentBiddersFeed.js":"29","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/HomePage/Stylings/styleHome.js":"30","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/HomePage/HomePagePic.js":"31","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/Stylings/styleCategory.js":"32","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/ProductCard.js":"33","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleProductList.js":"34","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleProductDetails.js":"35","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/Stylings/styleWelcomePage.js":"36","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/Stylings/styleRecentWinsFeed.js":"37","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Stylings/styleSignup.js":"38","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/UserBidsOrWinsFeed.js":"39","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Notifications.js":"40","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Stylings/styleProfile.js":"41","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleBidConfirmation.js":"42","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/ProfileImageCard.js":"43","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Stylings/styleLogin.js":"44","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleProductCard.js":"45","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/HomePage/Stylings/styleHomepagePic.js":"46","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/FeedItem.js":"47","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Stylings/styleNotifications.js":"48","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/NotificationFeedItem.js":"49","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/Stylings/styleUserBidsOrWinsFeed.js":"50","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/Stylings/styleFeedItem.js":"51","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/Stylings/styleRecentBidsFeed.js":"52","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/ProductCardMini.js":"53","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleProductCardMini.js":"54"},{"size":357,"mtime":1635902045617,"results":"55","hashOfConfig":"56"},{"size":4483,"mtime":1638760502044,"results":"57","hashOfConfig":"56"},{"size":362,"mtime":1635902045617,"results":"58","hashOfConfig":"56"},{"size":99,"mtime":1635902045617,"results":"59","hashOfConfig":"56"},{"size":1584,"mtime":1635902045617,"results":"60","hashOfConfig":"56"},{"size":464,"mtime":1638760522132,"results":"61","hashOfConfig":"56"},{"size":10226,"mtime":1638761951390,"results":"62","hashOfConfig":"56"},{"size":1190,"mtime":1638760995499,"results":"63","hashOfConfig":"56"},{"size":6011,"mtime":1635902045613,"results":"64","hashOfConfig":"56"},{"size":2652,"mtime":1638762221024,"results":"65","hashOfConfig":"56"},{"size":617,"mtime":1638754297166,"results":"66","hashOfConfig":"56"},{"size":1010,"mtime":1635902045617,"results":"67","hashOfConfig":"56"},{"size":3063,"mtime":1638760700877,"results":"68","hashOfConfig":"56"},{"size":1906,"mtime":1638754220800,"results":"69","hashOfConfig":"56"},{"size":1592,"mtime":1635902045612,"results":"70","hashOfConfig":"56"},{"size":1048,"mtime":1635902045611,"results":"71","hashOfConfig":"56"},{"size":5261,"mtime":1635902045616,"results":"72","hashOfConfig":"56"},{"size":3621,"mtime":1635902045615,"results":"73","hashOfConfig":"56"},{"size":3232,"mtime":1638762119731,"results":"74","hashOfConfig":"56"},{"size":966,"mtime":1638760252649,"results":"75","hashOfConfig":"56"},{"size":10619,"mtime":1638762154207,"results":"76","hashOfConfig":"56"},{"size":4908,"mtime":1638761923283,"results":"77","hashOfConfig":"56"},{"size":1553,"mtime":1638760799203,"results":"78","hashOfConfig":"56"},{"size":3393,"mtime":1635902045613,"results":"79","hashOfConfig":"56"},{"size":1252,"mtime":1635902045614,"results":"80","hashOfConfig":"56"},{"size":1519,"mtime":1638762050157,"results":"81","hashOfConfig":"56"},{"size":838,"mtime":1638758788363,"results":"82","hashOfConfig":"56"},{"size":3919,"mtime":1642383043967,"results":"83","hashOfConfig":"56"},{"size":2887,"mtime":1642381746237,"results":"84","hashOfConfig":"56"},{"size":343,"mtime":1638761583268,"results":"85","hashOfConfig":"56"},{"size":1449,"mtime":1635902045613,"results":"86","hashOfConfig":"56"},{"size":217,"mtime":1635902045614,"results":"87","hashOfConfig":"56"},{"size":5104,"mtime":1642379654806,"results":"88","hashOfConfig":"56"},{"size":413,"mtime":1638759172157,"results":"89","hashOfConfig":"56"},{"size":864,"mtime":1635902045615,"results":"90","hashOfConfig":"56"},{"size":186,"mtime":1635902045612,"results":"91","hashOfConfig":"56"},{"size":673,"mtime":1642382364670,"results":"92","hashOfConfig":"56"},{"size":500,"mtime":1635902045617,"results":"93","hashOfConfig":"56"},{"size":1330,"mtime":1642382100808,"results":"94","hashOfConfig":"56"},{"size":1454,"mtime":1635902045616,"results":"95","hashOfConfig":"56"},{"size":1257,"mtime":1635902045616,"results":"96","hashOfConfig":"56"},{"size":231,"mtime":1635902045615,"results":"97","hashOfConfig":"56"},{"size":1197,"mtime":1635902045616,"results":"98","hashOfConfig":"56"},{"size":500,"mtime":1635902045616,"results":"99","hashOfConfig":"56"},{"size":451,"mtime":1635902045615,"results":"100","hashOfConfig":"56"},{"size":1811,"mtime":1635902045613,"results":"101","hashOfConfig":"56"},{"size":1444,"mtime":1642382792837,"results":"102","hashOfConfig":"56"},{"size":588,"mtime":1635902045616,"results":"103","hashOfConfig":"56"},{"size":1416,"mtime":1638761811221,"results":"104","hashOfConfig":"56"},{"size":651,"mtime":1635902045613,"results":"105","hashOfConfig":"56"},{"size":564,"mtime":1635902045612,"results":"106","hashOfConfig":"56"},{"size":632,"mtime":1635902045612,"results":"107","hashOfConfig":"56"},{"size":3536,"mtime":1642381915813,"results":"108","hashOfConfig":"56"},{"size":743,"mtime":1642382006690,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"1fjz7yt",{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"121","messages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"112"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"112"},{"filePath":"131","messages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"145","messages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"112"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"112"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"112"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"112"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"112"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"112"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"188","messages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"190","messages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"196","messages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"112"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/index.js",[],["231","232"],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/App.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/reportWebVitals.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Context.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Routes.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Stylings/styleApp.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/PrimarySearchAppBar.js",["233"],"import React, { useState, useContext } from \"react\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Avatar from '@material-ui/core/Avatar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport InputBase from '@material-ui/core/InputBase';\nimport Badge from '@material-ui/core/Badge';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Popover from '@material-ui/core/Popover';\nimport Hidden from '@material-ui/core/Hidden';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport NotificationsIcon from '@material-ui/icons/Notifications';\nimport Button from '@material-ui/core/Button';\nimport Link from '@material-ui/core/Link';\nimport {useHistory} from 'react-router-dom';\nimport FreebayAPI from \"../../Api.js\"\nimport useStyles from \"./Stylings/stylePrimarySearchAppBar.js\"\nimport NotificationAppBarItem from \"../User/NotificationAppBarItem\"\nimport Context from \"../../Context\"\n\n\n/** Application bar located at the top of every page on site above the \n * CategoriesBar. If logged in, displays user's account balance, \n * notifications icon, and profile icon. If not logged in, shows login \n * and signup links. Contains a search bar for a user to search all \n * products.\n *\n * - searchTerm: The text a user types into the search bar. updates\n *   as user types. The searchTerm will be used to call the API to\n *   search all products\n * \n * - accountAnchorEl & notificationsAnchorEl: Sets anchor points\n *   on the account/notifications button for the Material UI dropdown menu\n *   to know where to dropdown from.\n * \n * - newNotifications: holds the notifications that have not yet been \n *   seen by the user. Number of new notifications held in this state \n *   will show as a number badge on the notifications icon if any.\n */\n\nfunction PrimarySearchAppBar() {\n  const classes = useStyles();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [accountAnchorEl, setAccountAnchorEl] = useState(null);\n  const [notificationsAnchorEl, setNotificationsAnchorEl] = useState(null);\n  const { currentUser, logout, setUpdateProductsList} = useContext(Context);\n\n  const history = useHistory()\n\n  let allNotifications;\n  let unviewedNotifications;\n\n  // If logged in, save allNotifications that have not been \n  // viewed to a variable and set that as the initial value for\n  // the newNotifications state\n  if (currentUser){\n    allNotifications = currentUser.notifications;\n    unviewedNotifications = allNotifications.filter( n => !n.wasViewed)\n\n  }\n  const [newNotifications, setNewNotifications] = useState(unviewedNotifications);\n\n  // update searchTerm state as user types into search bar\n  function handleChange(evt) {\n    setSearchTerm(evt.target.value);\n  }\n\n  // Value of these variables determine whether the dropdown menu \n  // should render\n  const isAccountMenuOpen = Boolean(accountAnchorEl);\n  const isNotificationsMenuOpen = Boolean(notificationsAnchorEl);\n\n  // Set the anchor element to the account icon when clicked to open.\n  // Then to set to null when clicked to close\n  const handleProfileMenuOpen = (event) => {\n    setAccountAnchorEl(event.currentTarget);\n  };\n  const handleProfileMenuClose = () => {\n    setAccountAnchorEl(null);\n  };\n\n  // Set the anchor element to the notifications icon when clicked \n  // to open. Then to set to null when clicked to close.\n  // Also set the NewNotifications state to 0 to make red badge disappear\n  const handleNotificationsMenuOpen = (event) => {\n    setNotificationsAnchorEl(event.currentTarget);\n    viewNotificationsApi()\n    setNewNotifications(0)\n  };\n  const handleNotificationsMenuClose = () => {\n    setNotificationsAnchorEl(null);\n  };\n\n  // will set all of a user's notifications to viewed\n  async function viewNotificationsApi() {\n    try {\n      await FreebayAPI.viewNotifications(currentUser.email);\n    } catch (err) {\n    }\n  }\n\n  // When a user submits a search term in the search bar, go to new page\n  // with the desired search info\n  function handleSubmit(evt) {\n    evt.preventDefault();\n    let newUrl = (`/products?name=` + searchTerm)\n    setUpdateProductsList(true);\n    history.push(newUrl)\n   }\n    \n  const menuId = 'primary-search-account-menu';\n  const renderAccountMenu = (\n    <Popover\n      anchorEl={accountAnchorEl}\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isAccountMenuOpen}\n      onClose={handleProfileMenuClose}\n      className={classes.link}\n    >\n      { currentUser \n      ? \n        <Link href={\"/Profile/\" + currentUser.username} \n        color=\"inherit\" style={{ textDecoration: 'none' }}>\n          <MenuItem onClick={handleProfileMenuClose} className={classes.link}>\n            Profile\n          </MenuItem>\n        </Link>\n      : \n        <MenuItem onClick={handleProfileMenuClose} className={classes.link}>\n          Profile\n        </MenuItem>\n      } \n      <Link className=\"m-2\" onClick={logout} color=\"inherit\" \n      className={classes.link} style={{ textDecoration: 'none' }}>\n        <MenuItem onClick={handleProfileMenuClose}>\n          Logout\n        </MenuItem>\n      </Link>\n    </Popover>\n  );\n\n  const renderNotificationsMenu = (\n    <Popover\n      anchorEl={notificationsAnchorEl}\n      anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isNotificationsMenuOpen}\n      onClose={handleNotificationsMenuClose}\n    >\n    { currentUser\n      ? ( unviewedNotifications.length > 0\n        ?\n          unviewedNotifications.map( n => (\n          <MenuItem onClick={handleNotificationsMenuClose}>\n            {( n.relatedProductId\n            ? <Link href={\"/product/\"+ n.relatedProductId} \n                    color=\"inherit\" \n                    style={{ textDecoration: 'none' }}\n              >\n                <NotificationAppBarItem n={n} shortened={true}/>\n              </Link>\n            : <Link href={`/profile/${currentUser.username}`} \n                    color=\"inherit\" \n                    style={{ textDecoration: 'none' }}\n              >\n                <NotificationAppBarItem n={n} shortened={true} />\n              </Link>\n            )}\n          </MenuItem>))\n        :\n        <MenuItem onClick={handleNotificationsMenuClose}>    \n          No new notifications\n        </MenuItem>\n        )\n      : <div></div>\n    }\n    </Popover>\n  );\n    \n  return (\n    <div className={classes.grow}>\n      <Hidden smUp>\n        <AppBar position=\"static\" style= {{background: \"#FFFFFF\"}} elevation={0} className={classes.mobileLogoBar}>\n          <Toolbar className= \"flex\">  \n            <Link href=\"/\" >\n              <img src=\"/images/logo.png\" alt=\"logo\" className={classes.logo}></img>\n            </Link>\n          </Toolbar>\n       </AppBar>\n      </Hidden>\n\n      <AppBar position=\"static\" style= {{background: \"#FFFFFF\"}} elevation={0}>\n        <Toolbar className= \"flex\">  \n        <Hidden only=\"xs\">\n          <Link href=\"/\" >\n            <img src=\"/images/logo.png\" alt=\"logo\" className={classes.logo}></img>\n          </Link>\n        </Hidden>\n          <div className={classes.search}>\n            <form onSubmit={handleSubmit} >\n              <div className={classes.searchIcon}>\n                <button type=\"submit\" className={classes.searchButton} >\n                  <SearchIcon />\n                </button>\n              </div>\n              <InputBase\n                placeholder=\"Search for anything\"\n                classes={{\n                  root: classes.inputRoot,\n                  input: classes.inputInput,\n                }}\n                inputProps={{ 'aria-label': 'search' }}\n                value={searchTerm}\n                onChange={handleChange}\n              />\n            </form>\n          </div>\n          {currentUser \n          ?  \n            <div>\n              <div className={classes.sectionDesktop}>\n                <Typography className={classes.balance}>\n                  {\"$\" + currentUser.balance}\n                </Typography>\n                <IconButton aria-label=\"show notifications\"\n                onClick={handleNotificationsMenuOpen} >\n                 <Badge badgeContent={newNotifications.length} \n                 color=\"secondary\" > \n                    { currentUser.imageUrl\n                    ?\n                      <NotificationsIcon \n                      edge=\"end\"\n                      aria-label=\"account of current user\"\n                      aria-controls={menuId}\n                      aria-haspopup=\"true\"\n                      className={classes.notificationsIcon}/>\n                    :\n                      <NotificationsIcon \n                      edge=\"end\"\n                      aria-label=\"account of current user\"\n                      aria-controls={menuId}\n                      aria-haspopup=\"true\" />\n                    }\n                    </Badge>\n                </IconButton>\n                <IconButton\n                  edge=\"end\"\n                  aria-label=\"account of current user\"\n                  aria-controls={menuId}\n                  onClick={handleProfileMenuOpen}\n                  aria-haspopup=\"true\"\n                >\n                { currentUser.imageUrl\n                ?\n                  <Avatar alt=\"Avatar\" className = {classes.profileAvatar}src={currentUser.imageUrl} />\n                :\n                  <AccountCircle/>                \n                }\n                </IconButton>\n              </div>\n            </div>\n          :  \n            <div>\n              <Button color=\"default\" href=\"/login#hello\" className={classes.button}>\n                Login\n              </Button>\n              <Button color=\"default\" href=\"/signup#hello\" className={classes.button}>\n                Signup\n              </Button>\n            </div>\n          }\n        </Toolbar>\n      </AppBar>\n      {renderNotificationsMenu}\n      {renderAccountMenu}\n    </div>\n  )\n}\n\nexport default PrimarySearchAppBar;","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/Footer.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/CategoriesBar.js",["234"],"import React from 'react';\nimport Category from './Category'\nimport MobileCategory from './MobileCategory'\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container';\nimport useStyles from './Stylings/styleCategoriesBar';\nimport { withStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport MuiAccordion from '@material-ui/core/Accordion';\nimport MuiAccordionSummary from '@material-ui/core/AccordionSummary';\nimport MuiAccordionDetails from '@material-ui/core/AccordionDetails';\n\n\n/** Application bar located at the top of every page on site below the\n *  PrimarySearchAppBar. Displays <Category> button components of all possible \n *  product categories. When a category is clickend a menu dropdown \n *  renders of subcategory links is displayed. \n */\n\n const Accordion = withStyles({\n  accordion: {\n    border: '1px solid rgba(0, 0, 0, .125)',\n    boxShadow: 'none',\n    'and:not(:last-child)': {\n      borderBottom: 0,\n    },\n    'and:before': {\n      display: 'none',\n    },\n    'and$expanded': {\n      margin: 'auto',\n    },\n  },\n  expanded: {},\n})(MuiAccordion);\n\nconst AccordionSummary = withStyles({\n  root: {\n    backgroundColor: 'rgba(0, 0, 0, .03)',\n    borderBottom: '1px solid rgba(0, 0, 0, .125)',\n    marginBottom: -1,\n    minHeight: 56,\n    'and$expanded': {\n      minHeight: 56,\n    },\n  },\n  content: {\n    'and$expanded': {\n      margin: '12px 0',\n    },\n  },\n  expanded: {},\n})(MuiAccordionSummary);\n\nconst AccordionDetails = withStyles((theme) => ({\n  root: {\n    padding: theme.spacing(2),\n  },\n}))(MuiAccordionDetails);\n\n\nfunction ProductCategoriesBar() {\n  const classes = useStyles();\n  const [expanded, setExpanded] = React.useState(false);\n\n  const handleChange = (panel) => (event, newExpanded) => {\n    setExpanded(newExpanded ? panel : false);\n  };\n\n  const renderMenu = (\n    <AppBar position=\"static\" className={classes.sectionDesktop} elevation={0}>\n      <Toolbar className=\"center\" className= {classes.root} variant=\"dense\">\n        <Container>\n          <Grid\n              container\n              direction=\"row\"\n              justify=\"space-between\"\n              alignItems=\"center\"\n            >\n            <Grid item >\n              <Category category={\"Electronics\"} className= \"flexItem\"\n              subCategories = {[\"Cell Phones and Accessories\", \n              \"Computers and Accessories\", \"Photo\", \"Smart Home\"]}/>\n            </Grid>\n            <Grid item >\n              <Category category={\"Fashion\"} className= \"flexItem\"\n              subCategories = {[\"Womens\", \"Mens\", \"Boys\", \"Girls\", \"Baby\"]}/>\n            </Grid>\n            <Grid item >\n              <Category category={\"Home & Garden\"} className= \"flexItem\"\n              subCategories = {[\"Appliances\", \"Health and Household\", \n              \"Home Improvement\", \"Kitchen and Dining\"]}/>\n            </Grid>\n            <Grid item >\n              <Category category={\"Movies, TV, & Games\"} className= \"flexItem\"\n              subCategories = {[\"Movies and TV\", \"Toys and Games\", \"Video Games\"]}/>\n            </Grid>\n            <Grid item >\n              <Category category={\"Misc.\"} className= \"flexItem\" \n              subCategories = {[\"Arts and Crafts\", \"Grocery\", \n              \"Pet Supplies\", \"Sports and Fitness\"]}/>\n            </Grid>\n          </Grid>\n        </Container>\n        </Toolbar>\n      </AppBar>\n\n\n  )\n  const renderMobileMenu = (\n    <div className={classes.sectionMobile}>\n      <Accordion square expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\n        <AccordionSummary aria-controls=\"panel1d-content\" id=\"panel1d-header\">\n          <Typography>Electronics</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n        <MobileCategory\n              subCategories = {[\"Cell Phones and Accessories\", \n              \"Computers and Accessories\", \"Photo\", \"Smart Home\"]}/>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion square expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\n        <AccordionSummary aria-controls=\"panel2d-content\" id=\"panel2d-header\">\n          <Typography>Fashion</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n        <MobileCategory\n              subCategories = {[\"Womens\", \"Mens\", \"Boys\", \"Girls\", \"Baby\"]}/>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion square expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\n        <AccordionSummary aria-controls=\"panel3d-content\" id=\"panel3d-header\">\n          <Typography>Home & Garden</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n        <MobileCategory\n              subCategories = {[\"Appliances\", \"Health and Household\", \n              \"Home Improvement\", \"Kitchen and Dining\"]}/>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion square expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\n        <AccordionSummary aria-controls=\"panel4d-content\" id=\"panel4d-header\">\n          <Typography>Movies, TV, & Games</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n        <MobileCategory\n              subCategories = {[\"Movies and TV\", \"Toys and Games\", \"Video Games\"]}/>\n        </AccordionDetails>\n      </Accordion>\n      <Accordion square expanded={expanded === 'panel5'} onChange={handleChange('panel5')}>\n        <AccordionSummary aria-controls=\"panel5d-content\" id=\"panel5d-header\">\n          <Typography>Misc.</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n        <MobileCategory\n              subCategories = {[\"Arts and Crafts\", \"Grocery\", \n              \"Pet Supplies\", \"Sports and Fitness\"]}/>\n        </AccordionDetails>\n      </Accordion>\n      <br></br>\n    </div>\n  )\n\n  return (\n    <div>\n      {renderMobileMenu}\n      {renderMenu}\n    </div>\n  );\n}\n\nexport default ProductCategoriesBar;","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Api.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/LoadingText.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/hooks/useLocalStorageHook.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/HomePage/Home.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/Stylings/stylePrimarySearchAppBar.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/WelcomePage.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/NotFound.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Signup.js",["235"],"import React, { useState, useContext } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { useHistory } from \"react-router-dom\";\nimport Alert from '@material-ui/lab/Alert';\nimport Context from \"../../Context\";\nimport useStyles from \"./Stylings/styleSignup\"\n\n\n// Renders a Register form to create an account. User is redirected \n// to a welcome page once a form has been submitted.\n\nexport default function Signup() {\n  const classes = useStyles();\n  const history = useHistory();\n  const { signup } = useContext(Context);\n\n  const [formData, setFormData] = useState({\n    username: \"\",\n    password: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    imageUrl: \"\"\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"Signup\",\n      \"signup=\", typeof signup,\n      \"formData=\", formData,\n      \"formErrors=\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /welcome.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await signup(formData);\n    if (result.success) {\n      history.push(\"/welcome\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(data => ({ ...data, [name]: value }));\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <a href=\"#hello\"></a>\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h4\">\n          Hello\n        </Typography><br></br>\n        <span style={{display: 'inline-block'}}>\n          Create a freeBay account\n        </span>\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                autoComplete=\"fname\"\n                name=\"firstName\"\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"firstName\"\n                label=\"First Name\"\n                autoFocus\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12} sm={6}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"lastName\"\n                label=\"Last Name\"\n                name=\"lastName\"\n                autoComplete=\"lname\"\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"username\"\n                label=\"Username\"\n                name=\"username\"\n                autoComplete=\"username\"\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"imageUrl\"\n                label=\"Image URL (optional)\"\n                type=\"imageUrl\"\n                id=\"imageUrl\"\n                autoComplete=\"current-imageUrl\"\n                onChange={handleChange}\n              />\n            </Grid>\n          </Grid>\n          {formErrors.length\n                    ? \n                    <div>\n                      <br/>\n                      <Alert variant=\"filled\" severity=\"error\">\n                        {formErrors}\n                      </Alert>\n                    </div>\n                    : null\n                }\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onSubmit={handleSubmit}\n          >\n            Sign Up\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/Login\" variant=\"body2\">\n                Already have an account? Sign in\n              </Link><br/>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n\n    </Container>\n  );\n}","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Login.js",["236"],"import React, { useState, useContext } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport Link from '@material-ui/core/Link';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport { useHistory } from \"react-router-dom\";\nimport Context from \"../../Context\";\nimport useStyles from \"./Stylings/styleLogin\";\nimport Alert from '@material-ui/lab/Alert';\n\n\n// Renders a login form. User is redirected to home page once logged in\n\nexport default function Login( ) {\n  const classes = useStyles();\n  const history = useHistory();\n  const { login } = useContext(Context);\n\n  \n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n  });\n  const [formErrors, setFormErrors] = useState([]);\n\n  console.debug(\n      \"LoginForm\",\n      \"login=\", typeof login,\n      \"formData=\", formData,\n      \"formErrors\", formErrors,\n  );\n\n  /** Handle form submit:\n   *\n   * Calls login func prop and, if successful, redirect to /companies.\n   */\n\n  async function handleSubmit(evt) {\n    evt.preventDefault();\n    let result = await login(formData);\n    if (result.success) {\n      history.push(\"/\");\n    } else {\n      setFormErrors(result.errors);\n    }\n  }\n\n  /** Update form data field */\n  function handleChange(evt) {\n    const { name, value } = evt.target;\n    setFormData(l => ({ ...l, [name]: value }));\n  }\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <a href=\"#hello\"></a>\n      <div className={classes.paper}>\n        <Typography component=\"h1\" variant=\"h4\" id=\"hello\">\n          Hello\n        </Typography><br></br>\n        <span style={{display: 'inline-block'}}>\n          Log in to freeBay\n        </span>\n        <form className={classes.form} noValidate onSubmit={handleSubmit}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                autoComplete=\"email\"\n                onChange={handleChange}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={handleChange}\n              />\n            </Grid>\n          </Grid>\n          {formErrors.length\n                    ? \n                    <div>\n                      <br/>\n                      <Alert variant=\"filled\" severity=\"error\">\n                        {formErrors}\n                      </Alert>\n                    </div>\n                    : null\n                }\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n            onSubmit={handleSubmit}\n          >\n            Login\n          </Button>\n          <Grid container justify=\"flex-end\">\n            <Grid item>\n              <Link href=\"/Signup\" variant=\"body2\">\n                Don't have an account? Create one here\n              </Link>\n            </Grid>\n          </Grid>\n        </form>\n      </div>\n    </Container>\n  );\n}","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Profile.js",["237"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport {useParams} from 'react-router-dom';\nimport FreebayAPI from '../../Api.js'\nimport Context from \"../../Context\";\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport UserBidsOrWinsFeed from \"../Feeds/UserBidsOrWinsFeed\";\nimport LoadingText from \"../Common/LoadingText\"\nimport Notifications from \"./Notifications\";\nimport ProfileImageCard from \"./ProfileImageCard\";\nimport useStyles from \"./Stylings/styleProfile\"\n\n// A users profile. Notifications feed will only be shown \n// if it is the logged in user's profile.\n\nfunction Profile() {\n  const classes = useStyles();\n  const history = useHistory()\n\n  const [userProfile, setUserProfile] = useState(null);\n  const {username} = useParams();\n  const {currentUser} = useContext(Context);\n\n  useEffect(() => {\n\n    async function getUserProfile(username) {\n      try {\n        let userObject = await FreebayAPI.getUser(username);\n        setUserProfile(userObject);\n      } catch(err){\n        return  history.push(\"/notFound\")\n      }\n\n    }\n    getUserProfile(username);\n  }, []);\n\n\n  if (!userProfile) return (<LoadingText />);\n\n  const { productsWon, bids } = userProfile\n\n  return (\n    <Container >\n    <br/>\n    {currentUser\n    ?\n      <Grid container justify=\"center\" alignItems=\"center\"   \n      direction=\"row\" spacing={3} className={classes.feedGrid}>\n\n          { (currentUser.username === userProfile.username)\n          ?\n            <Grid item xs={12} md={4}>\n              <ProfileImageCard userProfile={userProfile}/>\n            </Grid>\n          :\n            <Grid item xs={12}>\n              <ProfileImageCard userProfile={userProfile}/>\n            </Grid>\n          }\n          { (currentUser.username === userProfile.username)\n          ?\n            <Grid item xs={12} md={7}>\n              <Notifications/>\n            </Grid>\n          : <div></div>\n          }\n\n        <Grid item xs={12} md={6} spacing={3} justify=\"center\" \n        alignItems=\"top\" direction=\"row\" className={classes.feedGrid}>\n            <UserBidsOrWinsFeed products={productsWon} title={\"Products Won\"}/>\n        </Grid>\n        <Grid item xs={12} md={6} spacing={3} justify=\"center\" \n        alignItems=\"top\" direction=\"row\" className={classes.feedGrid}>\n            <UserBidsOrWinsFeed products={bids} title={\"Highest Bids\"}/>\n        </Grid>\n      </Grid>\n    :\n      <Grid container justify=\"center\" alignItems=\"center\"   \n      direction=\"row\" spacing={3} className={classes.feedGrid}>\n        <Grid item xs={12}>\n          <ProfileImageCard userProfile={userProfile}/>\n        </Grid>\n        <Grid item xs={12} md={6} spacing={3} justify=\"center\" \n        alignItems=\"top\" direction=\"row\" className={classes.feedGrid}>\n            <UserBidsOrWinsFeed products={productsWon} title={\"Products Won\"}/>\n        </Grid>\n        <Grid item xs={12} md={6} spacing={3} justify=\"center\" \n        alignItems=\"top\" direction=\"row\" className={classes.feedGrid}>\n            <UserBidsOrWinsFeed products={bids} title={\"Highest Bids\"}/>\n        </Grid>\n      </Grid>\n    }\n      </Container>\n  );\n}\n\nexport default Profile;\n\n","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/BidConfirmation.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/ProductDetails.js",["238","239","240"],"import React, { useState, useEffect, useContext } from \"react\";\nimport Button from '@material-ui/core/Button';\nimport Rating from '@material-ui/lab/Rating';\nimport {useParams, useHistory, withRouter } from 'react-router-dom';\nimport FreebayAPI from '../../Api.js'\nimport Container from '@material-ui/core/Container';\nimport TextField from '@material-ui/core/TextField';\nimport LoadingText from '../Common/LoadingText.js'\nimport Link from '@material-ui/core/Link';\nimport Countdown from 'react-countdown';\nimport useStyles from './Stylings/styleProductDetails.js'\nimport Context from \"../../Context\";\nimport Alert from '@material-ui/lab/Alert';\nimport { Grid, Card, CardContent, Typography} from '@material-ui/core/'\n\n\n// Component that displays all information of a product.\n// Renders a countdown to the end of the auction along with an input\n// to allow the user to bid on the product.\n\n/** Displays all information of a product along with a form to\n *  bid on product, if the auction time has not expired.\n * \n *  - product: productResult of grabbing the desired product from API\n * \n *  - countdown: holds the imported <Countdown/> component in state\n * \n *  - bidAmount: state of entered bid into form. Updates while typing\n * **/\n\nfunction ProductDetails() {\n  const classes = useStyles();\n  const history = useHistory()\n  const [infoLoaded, setInfoLoaded] = useState(false);\n  const [product, setProduct] = useState(null);\n  const [countdown, setCountdown] = useState([]);\n  const [bidAmount, setBidAmount] = useState(null);\n  const [formErrors, setFormErrors] = useState(null);\n  const {id} = useParams();\n  const { currentUser, setUpdateAppBar } = useContext(Context);\n\n  useEffect(() => {\n    async function getProduct(id) {\n      try {\n        const productResult = await FreebayAPI.getProduct(id)  \n\n        // If the product has a bid, convert to float type and set with \n        // 2 decimal places (price format) and save to bidPrice variable. \n        // If no bid, do the same with startingBid.\n        if (productResult.bidId){\n          let bidDisplay = parseFloat(productResult.bidPrice).toFixed(2);\n          productResult.bidDisplay = bidDisplay;\n        } else {\n          let bidDisplay = parseFloat(productResult.startingBid).toFixed(2);\n          productResult.bidDisplay = bidDisplay;\n        }\n        setProduct(productResult);\n\n        // Call the function that creates the auction countdown timer \n        getTimeLeft(productResult.auctionEndDt)\n        setInfoLoaded(true)\n      } catch(err){\n        return console.log(err)\n      }\n\n    }\n    setInfoLoaded(false)\n    getProduct(id)\n  }, []);\n\n  // Function creates the countdown timer by subtracting the current time\n  // from the product's auction end datetime object. Saves it to state.\n  function getTimeLeft(dateTime){\n    const auctionEndObj = new Date(dateTime)\n    const totalTimeLeft = Date.parse(auctionEndObj) - Date.parse(new Date());\n    setCountdown(totalTimeLeft);\n    }\n\n  // Handles the form submit of the bid and renders the appropriate\n  // error, if any, by saving to state.\n  async function handleSubmit(evt) {\n      evt.preventDefault();\n      try{\n        if (!currentUser){\n          setFormErrors(\"Please login to place bid\")\n          return\n        } \n\n        const balance = parseFloat(currentUser.balance)\n        const bid = parseFloat(bidAmount)\n        const bidPrice = parseFloat(product.bidPrice)\n        const startingBid = parseFloat(product.startingBid)\n\n        if (isNaN(bid)){\n          setFormErrors(\"Please submit a real bid\")\n        } else if (bid > balance){\n          setFormErrors(\"You do not have sufficient funds to place this bid\")\n        } else if (bid < bidPrice){\n          setFormErrors(\"Please submit bid higher than the current bid\")\n        } else if (bid < startingBid){\n          setFormErrors(\"Please submit bid higher than the starting bid\")\n        } else{\n          await FreebayAPI.addBid(id, bid)\n\n          // Trigger a rerender of the CurrentUser by changing the\n          // UpdateAppBar state. This will correctly show the user's\n          // current balance amount and amount of notifications in the \n          // <PrimarySearchAppBar/> component.\n          setUpdateAppBar(true)\n          history.push('/bidPlaced')\n        }\n      } catch(err){\n        return console.log(err)\n      }\n  }\n\n  function handleChange(evt) {\n    setBidAmount(evt.target.value);\n  }\n\n  if (!infoLoaded) return <LoadingText />;\n\n  return (\n    <Container>\n      <br/>\n      <Grid container spacing={4} justifyContent=\"center\" alignItems=\"center\" >\n        <Grid item  xs={12} md={6}>\n          <img\n              className={classes.media}\n              src={product.imageUrl}\n            />\n        </Grid>\n        <Grid item xs={12} md={6}>\n          <Card className={classes.root} variant=\"outlined\">\n              <CardContent className={classes.content} justify=\"center\">\n                <Typography variant=\"h5\">\n                  {product.name}\n                </Typography><br/>\n                <div className={classes.ratingContainer}>\n                <Rating name=\"read-only\" value={product.rating} size=\"medium\" \n                readOnly display=\"inline\"/>      \n                <Typography variant=\"caption\" display=\"inline\" \n                className=\"ratingNumber\" color=\"textSecondary\">\n                  {product.numOfRatings} ratings\n                </Typography>\n                </div>\n                <br/>\n\n                <hr className={classes.hr}/><br/>\n              {/* If the product's auction has ended, render nothing.\n              Otherwise, render the currentBid and bidderUsername. If no bidder,\n              render the starting price of the product.*/}\n              { product.auctionEnded\n              ? \n                <div></div>\n              : \n                product.bidPrice \n                ?\n                  <div>\n                    <Typography variant=\"h4\" className={classes.price} \n                    color=\"textPrimary\" display=\"inline\" >\n                      ${product.bidDisplay}{' '}                 \n                      <Typography variant=\"subtitle1\" color=\"textSecondary\" \n                      display=\"inline\">\n                        is the highest bid by {' '} \n                        <Link href={\"/Profile/\" + product.bidderUsername}>\n                          {product.bidderUsername}\n                        </Link>\n                      </Typography>\n                    </Typography>\n                    <form className={classes.root} onSubmit={handleSubmit} \n                    noValidate autoComplete=\"off\">\n                      <TextField id=\"outlined-basic\" label=\"Bid\" variant=\"outlined\" \n                      size=\"small\" onChange={handleChange}/>\n                      <span>{\"  \"}</span>       \n                      <Button size=\"medium\" type=\"submit\" variant=\"contained\" \n                      color=\"Primary\" className={classes.margin}>\n                        Place Bid\n                      </Button>\n                    </form>\n                  </div>\n                : \n                  <div>\n                    <Typography variant=\"h4\" className={classes.price} \n                    color=\"textPrimary\"  display=\"inline\">\n                      ${product.bidDisplay}{' '}\n                      <Typography variant=\"subtitle1\" color=\"textSecondary\" \n                      display=\"inline\">\n                        is the starting bid\n                      </Typography>\n                    </Typography>\n                \n                    <form className={classes.root} onSubmit={handleSubmit} \n                    noValidate autoComplete=\"off\">\n\n                    <TextField id=\"outlined-basic\" label=\"Bid\" variant=\"outlined\" \n                    size=\"small\" onChange={handleChange}/>\n                    <span>{\"  \"}</span>       \n                    <Button size=\"medium\" type=\"submit\" variant=\"contained\" \n                    color=\"Primary\" className={classes.margin}>\n                      Place Bid\n                    </Button>\n                    </form>\n                </div>\n              }\n              {/* Render errors input in the bid form, if any. If not,\n              render the countdown timer and number of bids. If auction has ended,\n              render Auction ended instead. */}\n                {formErrors\n                    ? \n                      <div>\n                        <br/>\n                        <Alert severity=\"error\" variant=\"filled\">{formErrors}</Alert>\n                      </div>\n                    : \n                      product.auctionEnded\n                      ? \n                        <div> \n                          <Typography  variant=\"subtitle1\"  \n                          component=\"p\" fontWeight=\"fontWeightBold\" display=\"inline\" className={classes.redText}>\n                            Auction ended!\n                          </Typography>\n                        </div>\n                      :\n                        <div><br/>\n                          <Typography  variant=\"subtitle1\" color=\"textSecondary\" \n                          component=\"p\" fontWeight=\"fontWeightBold\">\n                          {product.numOfBids}\n                            { \n                            (product.numOfBids == 1)\n                            ? \" bid\" : \" bids\"\n                            }\n                          </Typography>\n                          <Countdown date={Date.now() + countdown} renderer={props => \n                          <Typography  variant=\"subtitle1\" color=\"textSecondary\" \n                          component=\"p\">\n                            {'  '}{\"Time left: \" + props.days + \"d \" + \n                            props.hours + \"h \" + props.minutes + \"m \" + \n                            props.seconds + \"s\"}\n                          </Typography>} \n                        />\n\n\n                        </div>\n                    }\n\n              </CardContent>\n          </Card>\n        </Grid>\n\n        <Grid item  xs={12}>\n          <Card variant=\"outlined\">\n              <CardContent className={classes.content}>\n                <Typography variant=\"h5\">\n                  Description\n                </Typography><br/>\n\n                <hr className={classes.hr}/>\n                <br/>\n                  <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                  {product.description} \n                  </Typography>\n\n              </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n      \n      </Container>\n  );\n}\n\nexport default withRouter(ProductDetails);\n\n","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/ProductsList.js",["241","242"],"import React, { useState, useContext, useEffect } from \"react\";\nimport ProductCard from './ProductCard.js'\nimport { Grid } from '@material-ui/core/'\nimport Container from '@material-ui/core/Container';\nimport Button from '@material-ui/core/Button';\nimport FreebayAPI from '../../Api.js'\nimport { useLocation } from 'react-router-dom';\nimport useStyles from './Stylings/styleProductList.js'\nimport {Typography} from '@material-ui/core/'\nimport Context from \"../../Context\";\nimport LoadingText from \"../Common/LoadingText\";\n\n\n// Shows a list of <ProductCards/> that are available for auction\n// Title of page changes based on whether the user searched for a term\n// or clicked on a category from the categories bar\n//\n// - nextPageQuery & prevPageQuery: queries added to the url of the\n//   next/previous page of products. \n\nfunction useQuery() {\n  return new URLSearchParams(useLocation().search);\n}\n\nconst ProductsList = ({location}) => {\n  const classes = useStyles();\n  const [nextPageQuery, setNextPageQuery] = useState(null);\n  const [prevPageQuery, setPrevPageQuery] = useState(null);\n  const [pageTitle, setPageTitle] = useState(null)\n  const { products, setProducts, updateProductsList, setUpdateProductsList } = useContext(Context);\n\n  let query = new URLSearchParams(useLocation().search)\n  let searchQueryObject = Object.fromEntries(new URLSearchParams(query))\n\n\n // call API to grab products based on search results\n  useEffect(() => {\n    async function getProductsInCategory() {\n      let nextPageSearchQueryObject = searchQueryObject\n      let prevPageSearchQueryObject = searchQueryObject\n      let res = await FreebayAPI.getProducts(searchQueryObject);\n      let productsResult = res.products\n      let numOfProductsInAuction = res.numOfProductsInAuction\n\n      setProducts(productsResult);\n\n      // Grab page number from the search query. If no page in query, set page to 1\n      let { page } = searchQueryObject\n      if (!page) {\n        page = \"1\"\n      }\n      page = parseInt(page)\n\n      // Create the url query string for the link to next page\n      if ((numOfProductsInAuction - (page*24) > 0)) {\n        const nextPage = (page + 1).toString()\n        nextPageSearchQueryObject[\"page\"] = nextPage\n\n        let nextSearchQueryString = new URLSearchParams(nextPageSearchQueryObject).toString()\n        setNextPageQuery(nextSearchQueryString)\n\n      } else {\n        setNextPageQuery(null)\n      }\n\n      // If not on first page, create url query string for the link to previous page\n      if (page > 1) {\n        let prevPage = (page - 1).toString()\n        prevPageSearchQueryObject[\"page\"] = prevPage\n        let prevSearchQueryString = new URLSearchParams(prevPageSearchQueryObject).toString()\n        setPrevPageQuery(prevSearchQueryString)\n      } else {\n        setPrevPageQuery(null)\n      }\n    }\n    \n    // if subCategory was included in the queryString, set the page title to that subcategory\n    // if the subCategory was within the Fashion category, add Fasion to end of title\n    let subCategory;\n    if (Object.keys(searchQueryObject)[0] === \"subCategory\") {\n      subCategory = searchQueryObject.subCategory\n      let fashionSubCategories = [\"Mens\", \"Womens\", \"Girls\", \"Boys\", \"Baby\"]\n      if (fashionSubCategories.indexOf(subCategory) !== -1) {\n        setPageTitle(subCategory + \" Fashion\")\n      } else{\n        setPageTitle(subCategory)\n      }\n    }\n    getProductsInCategory()\n    setUpdateProductsList(false)\n\n  }, [updateProductsList]);\n\n  if (!products) return <LoadingText />;\n  \n\n  return (\n    <Container><br/>\n    {\n      searchQueryObject.subCategory\n      ?\n        <Typography variant=\"h4\" spacing={5} className={classes.listTitle}>\n          Products in {pageTitle} \n        </Typography>\n      :\n        <Typography variant=\"h4\" spacing={5} className={classes.listTitle}>\n          Search Results for \"{searchQueryObject.name}\"\n        </Typography>\n    }\n      <br/>\n      <Grid container spacing={3} justify=\"center\">\n        {products.map((product) =>{\n          return <Grid item s={4} m={3} spacing={3}>\n                    <ProductCard product={product}/>\n                  </Grid>\n        })}\n      </Grid>\n      <Grid container justify=\"center\">\n        {(prevPageQuery)\n        ? <Button size=\"medium\" className={classes.button} \n          href={\"/products?\" + prevPageQuery}>\n            {\"< Previous page\"}\n          </Button>\n        : <Button size=\"medium\" className={classes.button} disabled>\n            {\"< Previous page\"}\n          </Button>\n        }\n        {(nextPageQuery)\n        ? <Button size=\"medium\" className={classes.button} \n          href={\"/products?\" + nextPageQuery}>\n            {\"Next page >\"}\n          </Button>\n        : <Button size=\"medium\" className={classes.button} disabled>\n            {\"Next page >\"}\n          </Button>\n        }\n      </Grid>\n      </Container>\n      )\n};\n\nexport default ProductsList;","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/NotificationAppBarItem.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/Category.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/MobileCategory.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/Stylings/styleCategoriesBar.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/Stylings/styleFooter.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/RecentWinsFeed.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/RecentBiddersFeed.js",["243","244","245","246","247"],"import React, { useState, useEffect } from \"react\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport FreebayAPI from \"../../Api\";\nimport ProductCardMini from \"../Products/ProductCardMini.js\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Container from \"@material-ui/core/Container\";\nimport useStyles from \"./Stylings/styleRecentBidsFeed.js\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport withWidth from \"@material-ui/core/withWidth\";\nimport ReactLoading from \"react-loading\";\n\n/* Renders a list of <ProductCardMini/> components showing products with\n   most recent bids. To be displayed on the Home page */\n\nfunction RecentBiddersFeed(haveBidsBeenChecked) {\n  const [recentlyBiddedProducts, setRecentlyBiddedProducts] = useState([]);\n  const classes = useStyles();\n\n  useEffect(() => {\n    // Number of products to be displayed in feed\n    let numOfBids = 4;\n\n    const handleGetRecentBidders = async () => {\n      const result = await FreebayAPI.getRecentBids(numOfBids);\n      setRecentlyBiddedProducts(null);\n    };\n    handleGetRecentBidders();\n  }, [haveBidsBeenChecked]);\n\n  return (\n    <Container className={classes.feedContainer}>\n      {!recentlyBiddedProducts || recentlyBiddedProducts.length < 1 ? (\n        <Grid\n          container\n          spacing={4}\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <ProductCardMini product={null} loading={true} />\n          <ProductCardMini product={null} loading={true} />\n          <Hidden only={[\"md\"]}>\n            <ProductCardMini product={null} loading={true} />\n          </Hidden>\n          <Hidden only={[\"md\"]}>\n            <ProductCardMini product={null} loading={true} />\n          </Hidden>\n        </Grid>\n      ) : (\n        <Grid\n          container\n          spacing={4}\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          {recentlyBiddedProducts[0] ? (\n            <ProductCardMini product={recentlyBiddedProducts[0]} />\n          ) : (\n            <div></div>\n          )}\n          {recentlyBiddedProducts[1] ? (\n            <ProductCardMini product={recentlyBiddedProducts[1]} />\n          ) : (\n            <div></div>\n          )}\n          {recentlyBiddedProducts[2] ? (\n            <Hidden only={[\"md\"]}>\n              <ProductCardMini product={recentlyBiddedProducts[2]} />\n            </Hidden>\n          ) : (\n            <div></div>\n          )}\n          {recentlyBiddedProducts[3] ? (\n            <Hidden only={[\"md\"]}>\n              <ProductCardMini product={recentlyBiddedProducts[3]} />\n            </Hidden>\n          ) : (\n            <div></div>\n          )}\n        </Grid>\n      )}\n    </Container>\n  );\n}\n\nexport default withWidth()(RecentBiddersFeed);\n","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/HomePage/Stylings/styleHome.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/HomePage/HomePagePic.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Navigation/Stylings/styleCategory.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/ProductCard.js",["248"],"import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport useStyles from \"./Stylings/styleProductCard.js\";\n\n// Card that displays its name, image, auction time left,\n// rating, and current bid price. Rendered within the ProductList component.\n// More detailed and bigger version of the ProductCardMini component.\n\nfunction ProductCard({ product }) {\n  const classes = useStyles();\n  let {\n    id,\n    name,\n    startingBid,\n    imageUrl,\n    rating,\n    auctionEndDt,\n    bidderUsername,\n    bidPrice,\n  } = product;\n  let bidDisplay;\n\n  // If the product has a bidPrice, display it on card,\n  // otherwise show starting bid.\n  // If either bidPrice or startingBid, set as a float\n  // type and show 2 decimal places\n  // to be displayed as price on a card.\n  if (bidPrice) {\n    bidDisplay = parseFloat(bidPrice).toFixed(2);\n  } else {\n    bidDisplay = parseFloat(startingBid).toFixed(2);\n  }\n\n  // Set a shortened product name ending with \"...\" to a\n  // variable to be displayed on card\n  if (name.length > 52) {\n    name = name.substring(0, 50) + \"...\";\n  }\n  // Function that subtracts current datetime object from the\n  // ending auction datetime parameter\n  // and returns an object with the days and hours remaining in the auction.\n  function getTimeRemaining(endtime) {\n    const total = Date.parse(endtime) - Date.parse(new Date());\n    const days = Math.floor(total / (1000 * 60 * 60 * 24));\n    const hours = Math.floor((total / (1000 * 60 * 60)) % 24);\n    const minutes = Math.floor((total / 1000 / 60) % 60);\n\n    return { days, hours, minutes };\n  }\n\n  // Execute getTimeRemaining with the product's ending\n  // datetime object as a parameter\n  const auctionEndObj = new Date(auctionEndDt);\n  const countdown = getTimeRemaining(auctionEndObj);\n\n  // Save the remaining days and hours of the auction\n  // into a string to be displayed on the card.\n  let countdownDisplay;\n  let onlyMinutesLeft;\n\n  if (countdown.days < 1) {\n    if (countdown.hours < 1) {\n      countdownDisplay = `Only ${countdown.minutes} minutes left!`;\n      onlyMinutesLeft = true;\n    } else {\n      countdownDisplay = `${countdown.hours}h ${countdown.minutes}m`;\n    }\n  } else {\n    countdownDisplay = `${countdown.days}d ${countdown.hours}h ${countdown.minutes}m`;\n  }\n\n  return (\n    <Link\n      href={\"/product/\" + id}\n      color=\"inherit\"\n      style={{ textDecoration: \"none\" }}\n    >\n      <Card className={classes.root} variant=\"outlined\">\n        <CardActionArea>\n          <div className={classes.imageContainer}>\n            <img className={classes.media} src={imageUrl} title={name} />\n          </div>\n          <CardContent style={{ minHeight: \"120px\" }}>\n            <div>\n              <Typography gutterBottom variant=\"body2\" component=\"p\">\n                {name}\n              </Typography>\n              <Rating\n                name=\"read-only\"\n                value={rating}\n                size=\"small\"\n                readOnly\n                display=\"inline\"\n              />\n            </div>\n            {bidderUsername ? (\n              <div>\n                <Typography\n                  variant=\"h6\"\n                  component=\"p\"\n                  display=\"inline\"\n                  className={classes.price}\n                >\n                  ${bidDisplay}\n                  {\"  \"}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  component=\"p\"\n                  display=\"inline\"\n                >\n                  bid by {bidderUsername}\n                </Typography>\n              </div>\n            ) : (\n              <div>\n                <Typography\n                  variant=\"h6\"\n                  color=\"body2\"\n                  component=\"p\"\n                  display=\"inline\"\n                  fontWeight=\"fontWeightBold\"\n                  className={classes.price}\n                >\n                  ${bidDisplay}\n                  {\"  \"}\n                </Typography>\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  display=\"inline\"\n                  component=\"p\"\n                >\n                  Starting bid\n                </Typography>\n              </div>\n            )}\n            {onlyMinutesLeft ? (\n              <Typography\n                variant=\"body2\"\n                className={classes.redText}\n                component=\"p\"\n              >\n                {countdownDisplay}\n              </Typography>\n            ) : (\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                {countdownDisplay}\n              </Typography>\n            )}\n          </CardContent>\n        </CardActionArea>\n      </Card>\n    </Link>\n  );\n}\n\nexport default ProductCard;\n","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleProductList.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleProductDetails.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Common/Stylings/styleWelcomePage.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/Stylings/styleRecentWinsFeed.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Stylings/styleSignup.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/UserBidsOrWinsFeed.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Notifications.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Stylings/styleProfile.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleBidConfirmation.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/ProfileImageCard.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Stylings/styleLogin.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleProductCard.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/HomePage/Stylings/styleHomepagePic.js",["249"],"import { makeStyles } from '@material-ui/core/styles';\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\n\nexport const useStyles = makeStyles((theme) => ({\n  header: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n    alignItems: \"flex-end\",\n    margin: \"10px\",\n    color: \"white\",\n    fontWeight: \"bold\"\n  },\n  headerSecondary: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"flex-start\",\n    alignItems: \"flex-end\",\n    margin: \"10px\",\n    color: \"white\",\n  },\n  imageTitle: {\n    margin: 0,\n    padding: \"1rem\",\n    color: \"white\",\n    textShadow: \"2px 2px 4px\",\n  },\n  img: {\n    padding: 0,\n    margin: 0,\n    height: \"auto\"\n  },\n  card: {\n    padding: 0,\n    margin: 0,\n    height: \"250px\",\n  }\n}));\n\nexport const FiCard = withStyles({\n  root: {\n    position: \"relative\"\n  }\n})(Card);\n\nexport const FiCardActionArea = withStyles({\n  root: {\n    position: \"relative\"\n  }\n})(CardActionArea);\n\nexport const FiCardActions = withStyles({\n  root: {\n    position: \"relative\"\n  }\n})(CardActions);\n\nexport const FiCardContent = withStyles({\n  root: {\n    position: \"relative\",\n    backgroundColor: \"transparent\"\n  }\n})(CardContent);\n\nexport const FiCardMedia = withStyles({\n  root: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    height: \"100%\",\n    width: \"100%\",\n    boxShadow: \"0 3000px rgba(0, 0, 0, 0.3) inset\"\n    \n  }\n})(CardMedia);\n\n// --- Exports --- //\nexport default {\n  FiCard,\n  FiCardActionArea,\n  FiCardActions,\n  FiCardContent,\n  FiCardMedia\n};\n\n","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/FeedItem.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/Stylings/styleNotifications.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/User/NotificationFeedItem.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/Stylings/styleUserBidsOrWinsFeed.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/Stylings/styleFeedItem.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Feeds/Stylings/styleRecentBidsFeed.js",[],"/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/ProductCardMini.js",["250"],"import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Rating from \"@material-ui/lab/Rating\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Link from \"@material-ui/core/Link\";\nimport useStyles from \"./Stylings/styleProductCardMini.js\";\nimport Grid from \"@material-ui/core/Grid\";\nimport ReactLoading from \"react-loading\";\n\n// Card that displays its image, bids, rating, and current bid price.\n// Rendered within the RecentBidders component and a template to be used for\n// other types of feeds. less details and smaller version of the\n// ProductCard component.\n\nfunction ProductCardMini({ product, loading }) {\n  const classes = useStyles();\n\n  if (loading) {\n    return (\n      <Grid item xs={12} sm={12} md={4} lg={3}>\n        <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n          <Card className={classes.loadingCard} variant=\"outlined\">\n            <CardContent className={classes.loadingCardContent}>\n              <ReactLoading\n                type={\"spinningBubbles\"}\n                color={\"#BDBDBD\"}\n                height={100}\n              />\n            </CardContent>\n          </Card>\n        </Grid>\n      </Grid>\n    );\n  }\n  let { id, name, startingBid, imageUrl, rating, username, bidPrice } = product;\n  let bidDisplay;\n\n  // If the product has a bidPrice, display it on card, otherwise\n  // show starting bid. If either bidPrice or startingBid, set as a float type\n  // and show 2 decimal places to be displayed as price on a card.\n  if (bidPrice) {\n    bidDisplay = parseFloat(bidPrice).toFixed(2);\n  } else {\n    bidDisplay = parseFloat(startingBid).toFixed(2);\n  }\n\n  return (\n    <Grid item xs={12} sm={12} md={4} lg={3}>\n      <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\">\n        <Link\n          href={\"/product/\" + id}\n          color=\"inherit\"\n          style={{ textDecoration: \"none\" }}\n        >\n          <Card className={classes.root} variant=\"outlined\">\n            <CardActionArea>\n              <div className={classes.imageContainer}>\n                <img className={classes.media} src={imageUrl} title={name} />\n              </div>\n              <CardContent className={classes.cardContent}>\n                <Rating\n                  name=\"read-only\"\n                  value={rating}\n                  size=\"small\"\n                  readOnly\n                  display=\"inline\"\n                />\n                <div>\n                  <Typography\n                    variant=\"h6\"\n                    component=\"p\"\n                    display=\"inline\"\n                    className={classes.price}\n                  >\n                    ${bidDisplay}\n                    {\"  \"}\n                  </Typography>\n                  <Typography\n                    variant=\"body2\"\n                    color=\"textSecondary\"\n                    component=\"p\"\n                    display=\"inline\"\n                  ></Typography>\n                </div>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  Current bid by\n                </Typography>\n                <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                  {username}\n                </Typography>\n              </CardContent>\n            </CardActionArea>\n          </Card>\n        </Link>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default ProductCardMini;\n","/Users/berkleyolmstead/Documents/Projects/Freebay/Frontend/src/Components/Products/Stylings/styleProductCardMini.js",["251"],"import { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  root: {\n    width: 200\n  },\n  media: {\n    height: 175,\n    width: 200,\n    objectFit: \"contain\",\n    display: \"block\",\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n    paddingTop: \"5px\",\n  },\n  ratingNumber: {\n    top: 200\n  },\n  price: {\n    fontWeight: \"bold\",\n    textDecoration: 'none'\n  },\n  noUnderline: {\n    textDecoration: 'none'\n  },\n  cardContent:{\n    minHeight: '100px'\n  },\n\n  loadingCard: {\n    width: 200,\n    height: 300,\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  cardContent:{\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n\n  },\n});\n\nexport default useStyles;\n",{"ruleId":"252","replacedBy":"253"},{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","severity":1,"message":"257","line":139,"column":7,"nodeType":"258","messageId":"259","endLine":139,"endColumn":31},{"ruleId":"256","severity":1,"message":"257","line":74,"column":35,"nodeType":"258","messageId":"259","endLine":74,"endColumn":60},{"ruleId":"260","severity":1,"message":"261","line":64,"column":7,"nodeType":"262","endLine":64,"endColumn":24},{"ruleId":"260","severity":1,"message":"261","line":60,"column":7,"nodeType":"262","endLine":60,"endColumn":24},{"ruleId":"263","severity":1,"message":"264","line":37,"column":6,"nodeType":"265","endLine":37,"endColumn":8,"suggestions":"266"},{"ruleId":"263","severity":1,"message":"267","line":69,"column":6,"nodeType":"265","endLine":69,"endColumn":8,"suggestions":"268"},{"ruleId":"269","severity":1,"message":"270","line":128,"column":11,"nodeType":"262","endLine":131,"endColumn":15},{"ruleId":"271","severity":1,"message":"272","line":230,"column":48,"nodeType":"273","messageId":"274","endLine":230,"endColumn":50},{"ruleId":"275","severity":1,"message":"276","line":21,"column":10,"nodeType":"277","messageId":"278","endLine":21,"endColumn":18},{"ruleId":"263","severity":1,"message":"279","line":92,"column":6,"nodeType":"265","endLine":92,"endColumn":26,"suggestions":"280"},{"ruleId":"275","severity":1,"message":"281","line":2,"column":8,"nodeType":"277","messageId":"278","endLine":2,"endColumn":16},{"ruleId":"275","severity":1,"message":"282","line":3,"column":8,"nodeType":"277","messageId":"278","endLine":3,"endColumn":20},{"ruleId":"275","severity":1,"message":"283","line":7,"column":8,"nodeType":"277","messageId":"278","endLine":7,"endColumn":18},{"ruleId":"275","severity":1,"message":"284","line":12,"column":8,"nodeType":"277","messageId":"278","endLine":12,"endColumn":20},{"ruleId":"275","severity":1,"message":"285","line":26,"column":13,"nodeType":"277","messageId":"278","endLine":26,"endColumn":19},{"ruleId":"269","severity":1,"message":"270","line":86,"column":13,"nodeType":"262","endLine":86,"endColumn":74},{"ruleId":"286","severity":1,"message":"287","line":83,"column":1,"nodeType":"288","endLine":89,"endColumn":3},{"ruleId":"269","severity":1,"message":"270","line":60,"column":17,"nodeType":"262","endLine":60,"endColumn":78},{"ruleId":"289","severity":1,"message":"290","line":37,"column":3,"nodeType":"291","messageId":"274","endLine":37,"endColumn":14},"no-native-reassign",["292"],"no-negated-in-lhs",["293"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history' and 'username'. Either include them or remove the dependency array.","ArrayExpression",["294"],"React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["295"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'searchQueryObject', 'setProducts', and 'setUpdateProductsList'. Either include them or remove the dependency array.",["296"],"'ListItem' is defined but never used.","'ListItemText' is defined but never used.","'Typography' is defined but never used.","'ReactLoading' is defined but never used.","'result' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-dupe-keys","Duplicate key 'cardContent'.","ObjectExpression","no-global-assign","no-unsafe-negation",{"desc":"297","fix":"298"},{"desc":"299","fix":"300"},{"desc":"301","fix":"302"},"Update the dependencies array to be: [history, username]",{"range":"303","text":"304"},"Update the dependencies array to be: [id]",{"range":"305","text":"306"},"Update the dependencies array to be: [searchQueryObject, setProducts, setUpdateProductsList, updateProductsList]",{"range":"307","text":"308"},[1191,1193],"[history, username]",[2621,2623],"[id]",[3463,3483],"[searchQueryObject, setProducts, setUpdateProductsList, updateProductsList]"]